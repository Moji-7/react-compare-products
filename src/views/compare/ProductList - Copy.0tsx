import React, { useEffect,useRef, createContext, useState, useCallback } from "react";
import ProductCard from "./ProductCard";
import CompareAddButton from "./CompareAddButton";
import { ProductItem } from "./ProductItem";
import CompareListContainer from "./CompareListContainer";
import { CButton, CContainer, CCol, CRow } from "@coreui/react";
import useContextService from "./service/useContextService";
import { ButtonAddTocompare,ButtonAddedTocompare } from './styles/compare';

interface Data {
  productcompareBasket: Array<ProductItem>;
  setProductCompareBasket: any;
}

export const compareContext = createContext<Data>({
  productcompareBasket: [],
  setProductCompareBasket: null,
});

const ProductList = () => {
  let { dataAll, loading, error, fetchProductItem_list, productItem_list } =
    useContextService({
      method: "GET",
      url: "/random",
      // params: {
      //   title: '?page=1&sort=26',
      // },
    });

  /////////////////////////////////////////////////////////////////////////////////////////////
    let refs = useRef<any>([React.createRef(), React.createRef()]);

  
  const [isAddToCompare, setIsAddToCompare] = useState(false);
  const [productcompareBasket, setProductCompareBasket] = useState<ProductItem[]>([]);
  const compareSelectButton = (product:ProductItem) => {
    //setIsAddToCompare(!isAddToCompare);
	setProductCompareBasket([...productcompareBasket,product ])
  };
 
  /////////////////////////////////////////////////////////////////////////////////////////////
  useEffect(() => {
    fetchProductItem_list();
    if (productItem_list)
      // setTutorials(dataAll)
      console.log(productItem_list);
    // } else {
    //   setTutorials([])
    // }
  }, [productItem_list]);

  useEffect(() => {
    if (error) {
      console.log(error);
    }
  }, [error]);

  useEffect(() => {
    if (loading) {
      console.log("retrieving data...");
    }
  }, [loading]);
  /////////////////////////////////////////////////////////////////////////////////////////////
  return (
    <compareContext.Provider
      value={{
        productcompareBasket: productcompareBasket,
        setProductCompareBasket: setProductCompareBasket,
      }}
    >
      <CContainer>
        <CRow className="align-items-start">
          {productItem_list &&
            productItem_list.map((product: ProductItem, index) => (
              <CCol sm={6} lg={3} key={index}>
                <>
				{!isAddToCompare ? ( 
					<ButtonAddTocompare ref={refs.current[product.id]}  onClick={ () => compareSelectButton(product)}>add!</ButtonAddTocompare>
				  ) : (
					<ButtonAddedTocompare ref={refs.current[product.id]}  onClick={ () => compareSelectButton(product)}>remove</ButtonAddedTocompare>
				  )}
                 
                  <ProductCard {...product}></ProductCard>
				  <CompareAddButton></CompareAddButton>
                </>
				
              </CCol>
            ))}
        </CRow>
      </CContainer>

      {productcompareBasket.length>0 ? <CompareListContainer />: null}
    </compareContext.Provider>
  );
};

export default ProductList;
